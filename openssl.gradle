task prepareOpenSSLDirectories {
    mustRunAfter clean
    doLast {
        mkdir project.openssl_build_dir
        mkdir project.openssl_install
    }
}

// Runs the configure step.
project.tasks.create("configureOpenSSL", Exec) {
  // OpenSSL is configured with Perl. We want to build static libraries and specify
  // a custom installation location.
  executable "perl"
  def configureLocation = project.file("$project.openssl_dir/Configure")
  args configureLocation, "no-shared", "--prefix=${project.openssl_install}", "--libdir=lib"
  workingDir project.openssl_build_dir

  // Add the arch specifier for Windows.
  if (project.platform.contains("windows")) {
    args project.platform == "windows-x86" ? "VC-WIN32" : "VC-WIN64A"
  } else if (project.platform == "osx-arm64") {
    args "darwin64-arm64-cc"
    environment "ARCHFLAGS", "-arch arm64"
  } else if (project.platform == "osx-x86_64") {
    args "darwin64-x86_64-cc"
    environment "ARCHFLAGS", "-arch x86_64"
  } else {
    args "--openssldir=/usr/local/ssl"
    if (project.platform == "linux-arm32") {
      args "linux-armv4"
      args "-DL_ENDIAN"
      args "-latomic"
      if (project.hasProperty('forcecrossbuild')) {
        args "--cross-compile-prefix=armv6-bullseye-linux-gnueabihf-"
      }
    } else if (project.platform == "linux-athena") {
      args "linux-armv4"
      args "-DL_ENDIAN"
      args "-latomic"
      args "--cross-compile-prefix=arm-frc2023-linux-gnueabi-"
    } else if (project.platform == "linux-arm64") {
      args "linux-aarch64"
      if (project.hasProperty('forcecrossbuild')) {
        args "--cross-compile-prefix=aarch64-bullseye-linux-gnu-"
      }
    }
  }

  dependsOn prepareOpenSSLDirectories
}

def make = project.platform.contains("windows") ? "nmake" : "make"

// Runs the build step.
project.tasks.create("buildOpenSSL", Exec) {
  // Make sure that we are configured.
  dependsOn "configureOpenSSL"

  // OpenSSL is built with make on UNIX and nmake on Windows.
  executable make
  workingDir project.openssl_build_dir

  // UNIX supports building with multiple workers.
  if (!project.platform.contains("windows"))
    args "-j${project.processors}"
}

// Runs the install step.
project.tasks.create("installOpenSSL", Exec) {
  // Make sure that we have built.
  dependsOn "buildOpenSSL"

  // OpenSSL is installed with make on UNIX and nmake on Windows.
  executable make
  args "install_sw"
  workingDir project.openssl_build_dir

  // UNIX supports installing with multiple workers.
  if (!project.platform.contains("windows"))
    args "-j${project.processors}"
}

// Create a "mega-task" that builds everything.
project.tasks.create("openSSL") {
  dependsOn "installOpenSSL"
  outputs.dir(project.openssl_install)
}
